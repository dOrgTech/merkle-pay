/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MerklePayInterface extends ethers.utils.Interface {
  functions: {
    "claim(address[],uint256[],uint256,bytes32[],uint256[])": FunctionFragment;
    "claimed(address,address)": FunctionFragment;
    "getClaimableFor(address,address[],uint256[])": FunctionFragment;
    "getClaimedFor(address,address[])": FunctionFragment;
    "getMerkleRootFor(uint256)": FunctionFragment;
    "isClaimAvailableFor(address,address[],uint256[])": FunctionFragment;
    "merkleData()": FunctionFragment;
    "owner()": FunctionFragment;
    "publishRoot(uint32,bytes32,bytes32,uint32,uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalClaimed(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      string[],
      BigNumberish[],
      BigNumberish,
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableFor",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedFor",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRootFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimAvailableFor",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishRoot",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRootFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimAvailableFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RootPublished(uint256,bytes32,bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootPublished"): EventFragment;
}

export class MerklePay extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MerklePayInterface;

  functions: {
    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address[],uint256[],uint256,bytes32[],uint256[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getClaimableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getMerkleRootFor(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMerkleRootFor(uint256)"(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isClaimAvailableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isClaimAvailableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, number, number] & {
        cycle: number;
        root: string;
        contentHash: string;
        blockTimestamp: number;
        blockNumber: number;
      }
    >;

    "merkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, number, number] & {
        cycle: number;
        root: string;
        contentHash: string;
        blockTimestamp: number;
        blockNumber: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    publishRoot(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publishRoot(uint32,bytes32,bytes32,uint32,uint32)"(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claim(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    cycle: BigNumberish,
    merkleProof: BytesLike[],
    amountsToClaim: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address[],uint256[],uint256,bytes32[],uint256[])"(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    cycle: BigNumberish,
    merkleProof: BytesLike[],
    amountsToClaim: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimed(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableFor(
    user: string,
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "getClaimableFor(address,address[],uint256[])"(
    user: string,
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getClaimedFor(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "getClaimedFor(address,address[])"(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getMerkleRootFor(
    cycle: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMerkleRootFor(uint256)"(
    cycle: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isClaimAvailableFor(
    user: string,
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isClaimAvailableFor(address,address[],uint256[])"(
    user: string,
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleData(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, number, number] & {
      cycle: number;
      root: string;
      contentHash: string;
      blockTimestamp: number;
      blockNumber: number;
    }
  >;

  "merkleData()"(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, number, number] & {
      cycle: number;
      root: string;
      contentHash: string;
      blockTimestamp: number;
      blockNumber: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  publishRoot(
    cycle: BigNumberish,
    root: BytesLike,
    contentHash: BytesLike,
    blockNumber: BigNumberish,
    blockTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "publishRoot(uint32,bytes32,bytes32,uint32,uint32)"(
    cycle: BigNumberish,
    root: BytesLike,
    contentHash: BytesLike,
    blockNumber: BigNumberish,
    blockTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalClaimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address[],uint256[],uint256,bytes32[],uint256[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getClaimableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getMerkleRootFor(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMerkleRootFor(uint256)"(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isClaimAvailableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isClaimAvailableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, number, number] & {
        cycle: number;
        root: string;
        contentHash: string;
        blockTimestamp: number;
        blockNumber: number;
      }
    >;

    "merkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, number, number] & {
        cycle: number;
        root: string;
        contentHash: string;
        blockTimestamp: number;
        blockNumber: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    publishRoot(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "publishRoot(uint32,bytes32,bytes32,uint32,uint32)"(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claimed(
      user: string | null,
      token: string | null,
      cycle: BigNumberish | null,
      amount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RootPublished(
      cycle: BigNumberish | null,
      root: BytesLike | null,
      contentHash: BytesLike | null,
      blockTimestamp: null,
      blockNumber: null
    ): EventFilter;
  };

  estimateGas: {
    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address[],uint256[],uint256,bytes32[],uint256[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRootFor(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMerkleRootFor(uint256)"(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimAvailableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimAvailableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleData(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    publishRoot(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "publishRoot(uint32,bytes32,bytes32,uint32,uint32)"(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address[],uint256[],uint256,bytes32[],uint256[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      amountsToClaim: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRootFor(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMerkleRootFor(uint256)"(
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimAvailableFor(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimAvailableFor(address,address[],uint256[])"(
      user: string,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishRoot(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publishRoot(uint32,bytes32,bytes32,uint32,uint32)"(
      cycle: BigNumberish,
      root: BytesLike,
      contentHash: BytesLike,
      blockNumber: BigNumberish,
      blockTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
